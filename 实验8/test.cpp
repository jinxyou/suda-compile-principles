#include <stdio.h>
#include <string>
#include <fstream>

using namespace std;
FILE* f1;
int line = 0, row = 0, val, length = 0;	//length为标识符个数
char ch = ' ';

int rule[][6] = { {0},{129,130,26,0},{1,34,28,0},{131,134,138,150,0},
{2,132,133,28,0},{0},{34,20,33,0},{27,132,133,0},{3,135,136,0},
{34,147,29,137,28,0},{27,34,147,0},{135,136,0},{4,0},{5,0},
{139,130,28,140,0},{6,34,158,28,0},{142,0},{144,0},{145,0},{146,0},
{148,0},{150,0},{34,143,0},{30,153,0},{7,152,8,141,0},{9,152,10,141,0},
{11,31,34,147,32,0},{12,31,153,149,32,0},{27,153,149,0},
{13,141,151,14,0},{28,141,151,0},{153,161,153,0},{15,153,0},
{16,155,154,0},{17,155,154,0},{155,154,0},{159,155,154,0},
{157,156,0},{160,157,156,0},{34,0},{33,0},{31,153,32,0},
{26,33,0},{16,0},{17,0},{18,0},{19,0},{20,0},{21,0},{22,0},
{23,0},{24,0},{25,0},{31,34,29,137,32,0} };
int table[34][35];
int pretable[][3] = { {128,1,1},{129,1,2},{130,2,3},{130,3,3},
{130,6,3},{130,34,3},{130,7,3},{130,9,3},{130,11,3},
{130,12,3},{130,13,3},{130,26,3},{130,28,3},{131,2,4},
{131,3,5},{131,6,5},{131,34,5},{131,7,5},{131,9,5},{131,11,5},
{131,12,5},{131,13,5},{131,26,5},{131,28,5},{132,34,6},
{133,27,7},{133,28,5},{134,3,8},{134,6,5},{134,34,5},{134,7,5},
{134,9,5},{134,11,5},{134,12,5},{134,13,5},{134,26,5},
{134,28,5},{135,34,9},{136,6,5},{136,13,5},{136,34,11},{136,28,5},{137,4,12},
{137,5,13},{138,6,14},{138,34,5},{138,7,5},{138,9,5},
{138,11,5},{138,12,5},{138,13,5},{138,26,5},{138,28,5},
{139,6,15},{140,6,14},{140,34,5},{140,7,5},{140,9,5},
{140,11,5},{140,12,5},{140,13,5},{140,26,5},{140,28,5},
{141,34,16},{141,7,17},{141,9,18},{141,11,19},{141,12,20},
{141,13,21},{141,14,5},{141,26,5},{141,28,5},{142,34,22},
{143,30,23},{143,31,41},{143,28,5},
{143,28,5},{143,14,5},{143,26,5},{143,14,5},
{144,7,24},{145,9,25},{146,11,26},{147,27,10},
{147,29,5},{147,32,5},{148,12,27},{149,27,28},{149,32,5},
{150,13,29},{150,26,5},{150,28,5},{151,28,30},{151,14,5},
{151,26,5},{151,28,30},{152,34,31},{152,16,31},{152,17,31},
{152,34,31},{152,33,31},{152,31,31},{152,15,32},{153,34,35},
{153,16,33},{153,17,34},{153,34,35},{153,33,35},{153,31,35},
{154,16,36},{154,17,36},{154,8,5},{154,10,5},{154,14,5},
{154,20,5},{154,21,5},{154,22,5},{154,23,5},{154,24,5},
{154,25,5},{154,26,5},{154,27,5},{154,28,5},{154,32,5},
{155,34,37},{155,33,37},{155,31,37},{156,18,38},{156,19,38},
{156,8,5},{156,10,5},{156,14,5},{156,16,5},{156,17,5},
{156,20,5},{156,21,5},
{156,22,5},{156,23,5},{156,24,5},{156,25,5},{156,26,5},
{156,27,5},{156,28,5},{156,32,5},{157,34,39},{157,33,40},
{157,31,41},{158,31,53},{158,28,5},
{159,16,43},{159,17,44},{160,18,45},
{160,19,46},{161,20,47},{161,21,48},{161,22,49},{161,23,50},
{161,24,51},{161,25,52},{0,0,0} };

struct {
	char name[21];
	int type;
	int addr;
}indent[1000];

struct st
{
	char name[21]; int code;
} sym;

char getchr()
{
	char ch = fgetc(f1);
	if (ch == '\n')
	{
		row = 1;
		line++;
	}
	else
		if (ch != ' ' && ch != '\t')
			row++;
	return(ch);
}

void error(int n)
{
	printf("There are %d-error\n", n);
	exit(0);
}

void getsym()
{
	char A[21];
	int k, i;
	static char reserved[15][10] = { "program","const","var","integer","long","procedure","if",
		 "then","while","do","read","write","begin","end","odd" };
	static char oprtr[17][3] = { "+","-","*","/","=","<>","<","<=",">",">=", ".",",",";",":",":=","(",")" };
	while (isspace(ch))	//是否为空格
	{
		ch = getchr();
	}
	if (isalpha(ch))	//是否为字母
	{
		k = 0;
		while (isalpha(ch) || isalnum(ch))	//向后取整个单词
		{
			if (isalpha(ch)) ch = tolower(ch);
			A[k++] = ch;
			ch = getchr();
		}
		A[k] = '\0';
		for (i = 0; i < 15; i++)
		{
			if (!strcmp(A, reserved[i]))		//检查是否为保留字
				break;
		}
		if (i < 15)
		{
			strcpy(sym.name, reserved[i]);
			sym.code = i + 1;
		}
		else
		{
			for (i = 0; i < length; i++)
			{
				if (!strcmp(A, indent[i].name))		//检查是否为已知标识符
				{
					break;
				}
			}
			if (i == length)
			{
				strcpy(indent[i].name, A);
			}
			strcpy(sym.name, indent[i].name);
			sym.code = 34;
		}
	}
	else if (isalnum(ch))	//识别数字
	{
		val = 0; k = 0;
		while (isalnum(ch))
		{
			val = val * 10 + ch - '0';	//每识别到一位数字就加在原数后
			sym.name[k++] = ch;
			ch = getchr();
		}
		sym.name[k] = '\0';
		sym.code = 33;
	}
	else
	{
		k = 0;
		if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '=' || ch == '.' || ch == ','		//除上面几种情况之外的其他运算符的识别
			|| ch == ';' || ch == '(' || ch == ')')
		{
			A[k++] = ch;
			A[k] = '\0';
			ch = getchr();
			for (i = 0; i < 17; i++)
			{
				if (!strcmp(A, oprtr[i]))
				{
					strcpy(sym.name, A);
					sym.code = i + 16;
				}
			}
		}
		else
		{
			k = 0;
			if (ch == '>' || ch == ':')		//检查一个运算符之后是否还有组合的运算符
			{
				A[k++] = ch;
				ch = getchr();
				if (ch == '=')
				{
					A[k++] = ch;
					ch = getchr();
				}
			}
			else if (ch == '<')
			{
				A[k++] = ch;
				ch = getchr();
				if (ch == '=' || ch == '>')
				{
					A[k++] = ch;
					ch = getchr();
				}
			}
			else if (ch == -1)
			{
				strcpy(sym.name, "");
				sym.code = 35;
			}
			else
				error(1);
		}
		A[k] = '\0';
		for (i = 0; i < 17; i++)
			if (!strcmp(A, oprtr[i]))
			{
				strcpy(sym.name, A);
				sym.code = i + 16;
			}
	}
}


int main()
{
	f1 = fopen("D:\code.txt", "r");
	int stack[2000];
	int i, j, x, top = -1, flag = 1;
	i = 0;
	while (pretable[i][0])
	{
		table[pretable[i][0] - 128][pretable[i][1]] = pretable[i][2];
		i++;
	};
	stack[++top] = 35; stack[++top] = 128;
	getsym();
	while (flag)
	{
		x = stack[top--];
		if (x >= 128)/* x为非终结符*/
		{
			if (table[x - 128][sym.code])
			{
				i = 0;
				while (rule[table[x - 128][sym.code]][i])
					i++;
				for (j = i - 1; j >= 0; j--)
					stack[++top] = rule[table[x - 128][sym.code]][j];
			}
			else error(100);
		}
		else if (x <= 35)/* x为终结符或#*/
		{
			if (x == 35)
				flag = 0;
			else {
				if (x == sym.code)
					getsym();
				else { error(101); }
			}
		}
		else error(102);
	}
	fclose(f1);
	printf("the program is right\n");
}